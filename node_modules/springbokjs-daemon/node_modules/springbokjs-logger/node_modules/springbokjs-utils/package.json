{
  "name": "springbokjs-utils",
  "description": "Springbok NodeJS Tools",
  "version": "0.3.9",
  "homepage": "http://www.springbokjs.org",
  "repository": {
    "type": "git",
    "url": "https://github.com/christophehurpeau/springbokjs-utils.git"
  },
  "author": {
    "name": "Christophe Hurpeau"
  },
  "scripts": {
    "test": "mocha --harmony -u tdd tests/"
  },
  "dependencies": {
    "js-yaml": "^3.0",
    "springbokjs-shim": "^0.1.14"
  },
  "devDependencies": {
    "mocha": "~1.18.2",
    "proclaim": "^2.0.0"
  },
  "contributors": [
    {
      "name": "Christophe Hurpeau",
      "email": "christophe@hurpeau.com",
      "url": "http://christophe.hurpeau.com/"
    }
  ],
  "readme": "springbokjs-utils\n\n### Use class\n\n```js\nvar S = require('springbokjs-utils');\n\nvar Person = S.newClass({\n    construct: function(name) {\n        this.name = name;\n    },\n    sayHello: function() {\n        console.log(\"hello, I'm \" + this.name);\n    }\n});\n\nvar Student = Person.extend(function(Student) {\n    Student.extendPrototype({\n        construct: function(name, grade) {\n            Student.superConstruct.call(this, name);\n            this.grade = grade;\n        },\n        sayHello: function() {\n            console.log(\"hi, I'm a student, my name is \" + this.name + \" and my grade is \" + this.grade);\n        }\n    });\n});\n\nvar bob = new Person('Bob');\nvar jack = new Student('Jack', 'A');\n\nbob.sayHello();\njack.sayHello();\n```\n\nYou can also write:\n```js\n// file Person.js\n\nvar S = require('springbokjs-utils');\n\nvar Person = S.newClass();\nmodule.exports = Person;\n\nPerson.extendPrototype({\n    construct: function(name) {\n        this.name = name;\n    },\n    sayHello: function() {\n        console.log(\"hello, I'm \" + this.name);\n    }\n});\n```\n\nThe first argument of `S.newClass` or `.extend` is either a callback, or an object. If it is an object, extendPrototype is called.\nWith a function you can create private methods.\nYou can also use defineProperties, defineProperty, see the full API for more informations.\n\n\n### fs with Promises\n\n```js\nvar fs = require('springbokjs-utils/fs');\n\nfs.readFile('./myfile')\n    .then(function(contentBuffer) {\n        console.log('success ', contentBuffer.toString());\n    })\n    .catch(function(error) {\n        console.error('error', error);\n    });\n\nPromise.all([\n    fs.readFile('./myFirstFile'),\n    fs.readFile('./mySecondFile')\n]).then(function(contents) {\n    console.log('myFirstFile content', contents[0].toString());\n    console.log('mySecondFile content', contents[1].toString());\n});\n\n```\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/christophehurpeau/springbokjs-utils/issues"
  },
  "_id": "springbokjs-utils@0.3.9",
  "_shasum": "4b98b8e64672ed2655d19c872cac040280010be4",
  "_from": "springbokjs-utils@^0.3.0",
  "_resolved": "https://registry.npmjs.org/springbokjs-utils/-/springbokjs-utils-0.3.9.tgz"
}
